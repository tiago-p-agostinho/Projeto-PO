package rest.menu.outlet;

import pt.utl.ist.po.ui.Command;
import pt.utl.ist.po.ui.Form;
import pt.utl.ist.po.ui.InputString;
import pt.utl.ist.po.ui.Display;
import pt.utl.ist.po.ui.InputInteger;
import pt.utl.ist.po.ui.InvalidOperation;
import java.util.Collection;
import java.util.Collections;
import java.util.ArrayList;


import rest.textui.UnknownKeyException;
import rest.textui.outlet.InvalidKeyException;
import rest.textui.outlet.MenuEntry;
import rest.textui.outlet.Message;
import rest.textui.outlet.NotAdequateException;
import rest.core.*;

/**
 * This class implements the command that adds a dish to the order of a client.
 *
 * @version 1.0
 * @author PO
 **/

public class AddDishOfTheDayToOrder extends Command<Outlet> {
    public AddDishOfTheDayToOrder(Outlet outlet) {
			super(false, MenuEntry.ADD_TO_BASKET, outlet);
    }

    /**
     * @see pt.utl.ist.po.ui.Command#execute()
     **/
    @Override
    public void execute() throws InvalidOperation {
			int noDishes=0;	
			Form f = new Form(title());
			InputString email = new InputString(f, Message.reqClientId());
			InputString dishName = new InputString(f, Message.reqDishOfTheDayName());
			InputInteger quantity = new InputInteger(f, Message.reqQuantity());
			f.parse();
			ArrayList<DishOfTheDay> dishes = new ArrayList<DishOfTheDay>();
			Client client = null;
			DishOfTheDay disDay = null;	
			boolean exists = false;
			boolean clientExist = false;
			for(Client c : entity().getClients()){
				if(email.value().equals(c.getKey())){
					client = c;
					clientExist = true;
					break;
				}
			}
			if(clientExist)
				throw new UnknownKeyException();
			String type = client.getType();
			ArrayList<Restaurants> rest = entity().getRestaurants();
			Collections.sort(rest);
			for(Restaurants r : rest){
				for(DishOfTheDay d : r.getDishes()){
					if((d.getAvailable())&&(dishName.value().equals(d.getName()))){
						if((type.equals("OMNIVOROUS"))||((type.equals("VEGETARIAN"))&&(d.getClasses().equals("VEG")))){
						disDay=d;						
						dishes.add(disDay);
						++noDishes;
						
						exists = true;
						break;		
					} else 
							throw new NotAdequateException(dishName.value(),email.value());
					}
				}
			}
			if(!exists)
				throw new InvalidKeyException(dishName.value());
			
			if(noDishes>1){
				Display d = new Display();
				boolean exist = false;
				for(DishOfTheDay dish : dishes){
					double finalPrice = dish.getPrice() - dish.getPrice()*dish.getDiscount()*0.01;
					d.addNewLine(dish.getRestaurantName()+"|"+(int)finalPrice+"|"+dish.getQuantity());
				}			
				d.display();
				f = new Form(title());
				InputString resName = new InputString(f, Message.reqRestId());
				f.parse();
				Restaurants res = null;
				
				for(DishOfTheDay r : dishes){
					if(resName.value().equals(r.getRestaurantName())){
						disDay = r;
						exist = true;
						for(Restaurants re : rest){
							if(resName.value().equals(re.getName())){
								res = re;	
								break;
							}
						} 
					}				
				}	
 				if(!exist){
					double lowPrice = 1000;	
			
					for(DishOfTheDay di : dishes){
						if(lowPrice > di.getFinalPrice(quantity.value())){
							lowPrice = di.getFinalPrice(quantity.value());
							disDay = di;
							
						}						
					}
					
					for(Restaurants r : rest){
						if(disDay.getRestaurantName().equals(r.getName())){
							client.addOrder(new Orders(disDay,r,disDay.getFinalPrice(quantity.value()),quantity.value()));
						}
					}
				
				}else{
					for(DishOfTheDay di : dishes){
						if(resName.value().equals(di.getRestaurantName())){
							client.addOrder(new Orders(disDay,res,disDay.getFinalPrice(quantity.value()),quantity.value()));
							break;		
					}
				}
				}
			} else {
					Restaurants resi = null;		
					for(Restaurants r : entity().getRestaurants()){
						if(disDay.getRestaurantName().equals(r.getName())){
							resi=r;
						}
					}
					client.addOrder(new Orders(disDay,resi,disDay.getFinalPrice(quantity.value()),quantity.value()));		
			}
					
			entity().setExecutado(true);
			}
			
}
